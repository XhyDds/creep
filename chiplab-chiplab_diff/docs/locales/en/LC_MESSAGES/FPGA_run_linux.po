# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Loongson
# This file is distributed under the same license as the CHIPLAB package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CHIPLAB \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-08 15:47+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../FPGA_run_linux/flash.md:1
msgid "串口烧写flash说明"
msgstr ""

#: ../../FPGA_run_linux/flash.md:2
msgid "现有一个使用 gcc 编译好的 binary 文件(后缀名为.bin)，准备使用串口将其下载至 FPGA 上的 flash 芯片中。"
msgstr ""

#: ../../FPGA_run_linux/flash.md:4
msgid "准备工具"
msgstr ""

#: ../../FPGA_run_linux/flash.md:5
msgid "FPGA开发板。"
msgstr ""

#: ../../FPGA_run_linux/flash.md:6
msgid "FPGA电源线。"
msgstr ""

#: ../../FPGA_run_linux/flash.md:7
msgid "FPGA下载线。"
msgstr ""

#: ../../FPGA_run_linux/flash.md:8
msgid "flash芯片。"
msgstr ""

#: ../../FPGA_run_linux/flash.md:9
msgid "串口线。"
msgstr ""

#: ../../FPGA_run_linux/flash.md:10
msgid "vivado。"
msgstr ""

#: ../../FPGA_run_linux/flash.md:11
msgid "串口软件（[ECOM](http://114.242.206.180:24989/nextcloud/index.php/s/qSFSAYBfnazmEeb)或[SecureCRT](http://114.242.206.180:24989/nextcloud/index.php/s/STS3oZCMBr2ySjD)）"
msgstr ""

#: ../../FPGA_run_linux/flash.md:13
msgid "烧写步骤"
msgstr ""

#: ../../FPGA_run_linux/flash.md:14
msgid "flash 芯片正确放置 FPGA 开发板上。"
msgstr ""

#: ../../FPGA_run_linux/flash.md:15
msgid "FPGA 开发板与电脑连接下载线、串口线。"
msgstr ""

#: ../../FPGA_run_linux/flash.md:16
msgid "电脑上打开 Vivado 工具中的 Open Hardware Manager，打开串口软件。"
msgstr ""

#: ../../FPGA_run_linux/flash.md:17
msgid ""
"FPGA 板上电，如正常下载 bit 流文件一样下载 "
"[programmer_by_uart.bit](http://114.242.206.180:24989/nextcloud/index.php/s/g58xZEGYiLAoiHB)"
" 至 FPGA 上。"
msgstr ""

#: ../../FPGA_run_linux/flash.md:18
msgid "串口软件，波特率选为 230400。"
msgstr ""

#: ../../FPGA_run_linux/flash.md:19
msgid "串口连接正常后根据提示，键盘输入 x 表示开始 xmodem 传输。"
msgstr ""

#: ../../FPGA_run_linux/flash.md:20
msgid "串口软件使用 xmodem 模式传输 binary 文件。"
msgstr ""

#: ../../FPGA_run_linux/flash.md:21
msgid "等待传输完成。"
msgstr ""

#: ../../FPGA_run_linux/flash.md:23
msgid "串口软件使用"
msgstr ""

#: ../../FPGA_run_linux/flash.md:24
msgid "minicom 烧写 flash 的步骤"
msgstr ""

#: ../../FPGA_run_linux/flash.md:25
msgid "终端输入"
msgstr ""

#: ../../FPGA_run_linux/flash.md:29
msgid ""
"选择Serial port setup完成Serial device和Bps/Par/Bits的设置 "
"![](../figures/serial_port_setup.png) 选择Filenames and paths完成Upload "
"directory的设置 ![](../figures/upload_dir.png) 于串口通讯界面，键盘输入x表示准备接受文件。     "
"`CTRL-A + s`，选择xmodem，空格选择需要传输的文件，回车启动传输，出现以下界面表示传输完成。 "
"![](../figures/upload_over.png)"
msgstr ""

#: ../../FPGA_run_linux/flash.md:36
msgid "ECOM 软件烧写 flash 的步骤"
msgstr ""

#: ../../FPGA_run_linux/flash.md:37
msgid "![](../figures/ecom.png)"
msgstr ""

#: ../../FPGA_run_linux/flash.md:38
msgid "SecureCRT 软件烧写 flash 的步骤"
msgstr ""

#: ../../FPGA_run_linux/flash.md:39
msgid "![](../figures/SecureCRT.png)"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:1
msgid "PMON 运行并 load 内核启动的方法"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:2
msgid "内核启动需要依次完成以下步骤："
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:3
msgid ""
"烧写 PMON "
"文件（[gzrom.bin](http://114.242.206.180:24989/nextcloud/index.php/s/q7K6Ty6tSSFwnHc)）到可插拔"
" SPI flash 上。"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:4
msgid "下载 bit 流文件。"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:5
msgid "运行 PMON。"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:6
msgid "搭建 tftp 服务器 Load 内核(vmlinux)。"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:7
msgid "启动内核。"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:9
msgid "烧写PMON"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:10
msgid "使用基于龙芯实验箱的串口编程flash的bit流文件，该bit流文件为一个简易SoC，可实现通过串口在线编程flash芯片。编程过程中，不需要拔下flash芯片，且速率达到6KB/sec。具体使用方法参考[串口烧写flash说明](./flash.md)"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:12
msgid "下载bit流文件"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:13
msgid ""
"将开发板与主机间的下载线连接好，开发板上电，使用 Vavidao 工具里的 Open Hardware Manager 下载 bit "
"文件到开发板上。"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:15
msgid "运行PMON"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:16
msgid ""
"上述烧写的 PMON 运行在下载的 SoC 上，需要使用串口展示运行信息。 将开发板与主机间的串口线连接好，打开串口软件，波特率设置为 "
"115200。"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:18
msgid "串口软件"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:19
msgid "Linux下"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:20
msgid "配置"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:21
msgid "终端下运行："
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:25
msgid ""
"选择Serial port setup：     ![](../figures/minicom_home.png)      进入配置界面："
"         ![](../figures/115200.png) 其中 E 行依据开发板上串口控制器的初始化代码中设置的波特率进行选择，F "
"和 G 行选择 NO。配置完成后按 Enter 返回，选择 Save setup as dfl 保存为默认设置。"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:30
msgid "运行"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:31
msgid ""
"将 USB "
"转串口一端连到电脑上，一端连到串口线上，串口线另一端连接到开发板上串口接口上。在Linux终端运行如下命令，开启电脑上的串口界面，开发板即可与电脑进行交换了。"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:35
msgid "Windows下"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:36
msgid ""
"Windows下可以使用免安装的[SecureCRTPortable串口软件](http://114.242.206.180:24989/nextcloud/index.php/s/STS3oZCMBr2ySjD)。"
" 先使用 USB 转串口和串口连接线将电脑和开发板相连。    双击程序打开，第一次启动界面如下： "
"![](../figures/secure_one.png) 第一行 Protocol 下拉选择 Serial，如下： "
"![](../figures/secure_two.png) 其中 Baud rate "
"为选择波特率，需根据开发板上串口控制器的初始化代码中设置的波特率进行选择(对于本次校验设备，波特率需选择 115200)。右侧 Flow "
"Control 全不选。Port 的选择需根据 Windows 电脑上的端口进行选择，可以右键电脑选择设备管理器进入设备管理器查看： "
"![](../figures/secure_three.png) 配置好串口后，点击 "
"connect，即可进入串口界面，在波特率设置正确的情况下，可以通过串口与开发板进行交互，如下： "
"![](../figures/secure_four.png)"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:45
msgid "PMON命令"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:46
msgid ""
"连接上串口，打开串口软件，设置好波特率，则可以在串口窗口中看到 PMON 运行信息，运行成功后则会进入 PMON 提示符，此时可以输入 PMON "
"命令。 ![](../figures/secure_five.png) 比如， SoC 中具有 MAC 控制器，PMON 中也有 MAC "
"驱动，则我们输入命令"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:52
msgid ""
"则可以给开发板上的网卡配置 IP 为 10.90.50.44（具体需配置的 IP 请查阅同网段的电脑 IP），假设同网段的电脑 IP 为 "
"10.90.50.43,则可以继续输入命令"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:56
msgid ""
"用于查看网络是否成功接入。Linux 在 ping 网络是会一直发 ping 包，可以 `Ctrl+C` 取消 ping。运行结果如下： "
"![](../figures/secure_six.png)"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:60
msgid "运行Linux"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:61
msgid ""
"由于运行 linux 时，最初的内核需要使用网口 load 进入内存执行，因而需要先搭建 Tftp 服务器。    "
"具体方法参见[tftp下载地址](http://114.242.206.180:24989/nextcloud/index.php/s/iw5g2CJALRjL25z)。"
"     目前运行 Linux 的方法是，先运行 PMON，随后通过网口 load Linux 内核进入 FPGA 上的 DDR3 "
"内存上。在load内核前，需要通过以下命令裁剪掉内核二进制文件中的符号信息。"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:67
msgid "load 命令为"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:71
msgid ""
"其中 10.90.50.43 为搭建的 tftp 服务器的 IP。     串口的波特率为 115200。      具体过程如下：     启动"
" PMON 后，输入命令"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:78
msgid ""
"给开发板上的网卡配置 IP 为 10.90.50.44（具体需 配置的 IP 请查阅同网段的电脑 IP），假设同网段的电脑 IP 为 "
"10.90.50.43, 则可以继续输入命令"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:83
msgid ""
"用于查看网络是否成功接入。       网络配置好了，需要通过网络下载 Linux 内核，需要先搭建好 tftp 服务器，假设搭建的 tftp "
"服务器 IP 为 10.90.50.43，将要下载 Linux 内核放到 tftp 服务器的根目录下，输入命令"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:89
msgid "即可 load 内核进入 FPGA 上的内存。 ![](../figures/pmon_one.png) 上表中显示 load 成功了，输入命令"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:95
msgid ""
"即可运行该内核，命令中 baudrate 需为数字，即为串口控制器设置的波特率，设置不对时，串口显示字符为乱码。Linux 内核运行时波特率为 "
"115200。     当运行 Linux 内核成功后会出现`/ #`提示符，可以使用常用的 Linux 命令。"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:97
msgid "加载内存到 NandFlash"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:98
msgid ""
"当前 SoC 支持 128MB的 NandFlash 作为电脑中的硬盘功能。因而可以将 Linux 内核加载到NandFlash 上。     "
"如果将内核加载至 NandFlash 中，且 PMON 中设置好参数。则复位实验箱后，会先自动运行 PMON 对设备进行初始化，随后 PMON "
"会自动加载 NandFlash 中的 Linux 内核进行启动，这就是通常电脑启动的过程。         Linux 内核加载至 "
"NandFlash 中并配置 PMON 的方法如下："
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:102
msgid "实验箱运行至 PMON；"
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:103
msgid "擦除 NandFlash，PMON 命令："
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:108
msgid "设置网口 IP，PMON 命令："
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:113
msgid "拷贝内核文件，PMON 命令："
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:118
msgid ""
"如果传输过程中卡顿了，请按 `Ctrl+C` 取消本次传输后，在输入上述命令开始传输。如果多次取消 后，依然传输失败，请复位开发板后重新来过。"
"     如果 devcp 命令报错了 Exception，请复位开发板后重新来过。 5. 设置分区空间大小，PMON 命令："
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:125
msgid "如果出现 warning，不用管。 6. 设置启动分区及参数，PMON 命令："
msgstr ""

#: ../../FPGA_run_linux/linux_run.md:131
msgid "重启 FPGA 实验箱，会自动完成本章开头描述的启动过程，自动运行到 Linux 内核状态： ![](../figures/nand.png)"
msgstr ""

